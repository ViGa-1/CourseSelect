<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.mapper.PerClassCourseMapper">
  <resultMap id="BaseResultMap" type="pojo.PerClassCourse">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="course_id" jdbcType="INTEGER" property="courseId" />
    <result column="grade" jdbcType="VARCHAR" property="grade" />
    <result column="term" jdbcType="VARCHAR" property="term" />
    <result column="to_class" jdbcType="VARCHAR" property="toClass" />
    <result column="total_need_stu_amount" jdbcType="INTEGER" property="totalNeedStuAmount" />
    <result column="have_stu_amount" jdbcType="INTEGER" property="haveStuAmount" />
  </resultMap>

  <update id="updateHaveStuAmountAddOne" parameterType="java.lang.Integer">
    UPDATE per_class_course
     SET have_stu_amount=have_stu_amount+1
     WHERE id=#{id,jdbcType=INTEGER}
  </update>


  <select id="selectByTermAndGradeAndClass" resultMap="BaseResultMap">
    SELECT *
    FROM per_class_course
    where (term=0 or term=#{0})
    and (grade =0 or grade=#{1})
    and (to_class=0 or to_class=#{2});

  </select>


  <select id="countAll" resultType="java.lang.Integer" >
    SELECT count(id) FROM per_class_course
  </select>

  <select id="selectByCourseId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from per_class_course
    where course_id = #{id,jdbcType=INTEGER}
  </select>



  <select id="selectAllLimited" resultMap="BaseResultMap" >
    SELECT *
    FROM per_class_course
    limit #{0},#{1}
  </select>

  <!--<select id="selectBySql"  resultMap="BaseResultMap" >-->
    <!--select *-->
    <!--from per_class_course-->
    <!--where CONCAT(grade,term,to_class,total_need_stu_amount,have_stu_amount)-->
    <!--LIKE '%${sql}%'-->
    <!--order by id-->
    <!--DESC LIMIT #{start} ,#{rows}-->
  <!--</select>-->
   <select id="selectBySql"  resultMap="BaseResultMap" >
    ${sql}
  </select>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, course_id, grade, term, to_class, total_need_stu_amount, have_stu_amount
  </sql>
  <select id="selectByExample" parameterType="pojo.PerClassCourseExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from per_class_course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from per_class_course
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from per_class_course
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="pojo.PerClassCourseExample">
    delete from per_class_course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="pojo.PerClassCourse">
    insert into per_class_course (id, course_id, grade, 
      term, to_class, total_need_stu_amount, 
      have_stu_amount)
    values (#{id,jdbcType=INTEGER}, #{courseId,jdbcType=INTEGER}, #{grade,jdbcType=VARCHAR}, 
      #{term,jdbcType=VARCHAR}, #{toClass,jdbcType=VARCHAR}, #{totalNeedStuAmount,jdbcType=INTEGER}, 
      #{haveStuAmount,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="pojo.PerClassCourse">
    insert into per_class_course
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="courseId != null">
        course_id,
      </if>
      <if test="grade != null">
        grade,
      </if>
      <if test="term != null">
        term,
      </if>
      <if test="toClass != null">
        to_class,
      </if>
      <if test="totalNeedStuAmount != null">
        total_need_stu_amount,
      </if>
      <if test="haveStuAmount != null">
        have_stu_amount,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="courseId != null">
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="grade != null">
        #{grade,jdbcType=VARCHAR},
      </if>
      <if test="term != null">
        #{term,jdbcType=VARCHAR},
      </if>
      <if test="toClass != null">
        #{toClass,jdbcType=VARCHAR},
      </if>
      <if test="totalNeedStuAmount != null">
        #{totalNeedStuAmount,jdbcType=INTEGER},
      </if>
      <if test="haveStuAmount != null">
        #{haveStuAmount,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="pojo.PerClassCourseExample" resultType="java.lang.Integer">
    select count(*) from per_class_course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update per_class_course
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.courseId != null">
        course_id = #{record.courseId,jdbcType=INTEGER},
      </if>
      <if test="record.grade != null">
        grade = #{record.grade,jdbcType=VARCHAR},
      </if>
      <if test="record.term != null">
        term = #{record.term,jdbcType=VARCHAR},
      </if>
      <if test="record.toClass != null">
        to_class = #{record.toClass,jdbcType=VARCHAR},
      </if>
      <if test="record.totalNeedStuAmount != null">
        total_need_stu_amount = #{record.totalNeedStuAmount,jdbcType=INTEGER},
      </if>
      <if test="record.haveStuAmount != null">
        have_stu_amount = #{record.haveStuAmount,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update per_class_course
    set id = #{record.id,jdbcType=INTEGER},
      course_id = #{record.courseId,jdbcType=INTEGER},
      grade = #{record.grade,jdbcType=VARCHAR},
      term = #{record.term,jdbcType=VARCHAR},
      to_class = #{record.toClass,jdbcType=VARCHAR},
      total_need_stu_amount = #{record.totalNeedStuAmount,jdbcType=INTEGER},
      have_stu_amount = #{record.haveStuAmount,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="pojo.PerClassCourse">
    update per_class_course
    <set>
      <if test="courseId != null">
        course_id = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="grade != null">
        grade = #{grade,jdbcType=VARCHAR},
      </if>
      <if test="term != null">
        term = #{term,jdbcType=VARCHAR},
      </if>
      <if test="toClass != null">
        to_class = #{toClass,jdbcType=VARCHAR},
      </if>
      <if test="totalNeedStuAmount != null">
        total_need_stu_amount = #{totalNeedStuAmount,jdbcType=INTEGER},
      </if>
      <if test="haveStuAmount != null">
        have_stu_amount = #{haveStuAmount,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="pojo.PerClassCourse">
    update per_class_course
    set course_id = #{courseId,jdbcType=INTEGER},
      grade = #{grade,jdbcType=VARCHAR},
      term = #{term,jdbcType=VARCHAR},
      to_class = #{toClass,jdbcType=VARCHAR},
      total_need_stu_amount = #{totalNeedStuAmount,jdbcType=INTEGER},
      have_stu_amount = #{haveStuAmount,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>